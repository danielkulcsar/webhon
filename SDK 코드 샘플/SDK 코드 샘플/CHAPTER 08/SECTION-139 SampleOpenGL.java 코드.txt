package com.example.gp17;

import java.nio.FloatBuffer;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;
import android.opengl.GLSurfaceView.Renderer;
import android.opengl.GLU;

// Renderer을 계승한 SampleOpenGL 작성
public class SampleOpenGL implements Renderer {

  // 프레임 표시 시 여기에서 구현한다
  @Override
  public void onDrawFrame(GL10 gl) {
  
    // 그리기 할 위치와 순서를 정의
    float[] quadCoords = new float[] {
        -1, 1, 0,  // 첫 번째 정점
        -1,-1, 0,  // 두 번째 정점
         1, 1, 0,  // 세 번째 정점
         1,-1, 0   // 네 번째 정점
    };
    FloatBuffer quadBuffer = FloatBuffer.wrap(quadCoords);
    
    // 행렬 연산 대상 설정
    gl.glMatrixMode(GL10.GL_MODELVIEW);
    // 단위 행렬을 로드
    gl.glLoadIdentity();
    // 평행 이동
    gl.glTranslatef(0, 0, -5);
    // 정점 배열을 활성화한다
    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
    // 정점배열 정의
    gl.glVertexPointer(3, GL10.GL_FLOAT, 0, quadBuffer);
    // 지정한 점을 정점으로 한 도형을 그린다
    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, 4);
  }
  // Surface가 변경되었을 때 여기에서 구현한다
  public void onSurfaceChanged(GL10 gl, int width, int height) {
  
    // 뷰포트 재설정
    gl.glViewport(0, 0, width, height);
    // GL의 그리기 방법에 투사점 변환
    gl.glMatrixMode(GL10.GL_PROJECTION);
    // GL의 표시 위치나 카메라 시점 등을 정의
    GLU.gluPerspective(
      gl, 45.0f, (float)width / (float)height, 1.0f, 100.0f);
  }
  // Surface가 작성되었을 때의 구현
  public void onSurfaceCreated(GL10 gl, EGLConfig config) {}
}